import { logger } from "./logger.js";

export interface ContentFilterRule {
  readonly type: "regex" | "text";
  readonly pattern: string;
  readonly description: string;
  readonly flags?: string; // –î–ª—è regex: i, g, m –∏ —Ç.–¥.
}

export class ContentFilter {
  private readonly rules: ContentFilterRule[] = [];

  constructor(rules: ContentFilterRule[] = []) {
    this.rules = [...rules];
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   */
  addRule(rule: ContentFilterRule): void {
    this.rules.push(rule);
    logger.debug(`–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${rule.description}`);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
   */
  addTextRule(text: string, description: string): void {
    this.addRule({
      type: "text",
      pattern: text,
      description,
    });
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
   */
  addRegexRule(pattern: string, description: string, flags = "gi"): void {
    this.addRule({
      type: "regex",
      pattern,
      description,
      flags,
    });
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ —Ç–µ–∫—Å—Ç—É
   */
  filterContent(content: string): string {
    let filteredContent = content;
    let totalReplacements = 0;

    for (const rule of this.rules) {
      const beforeLength = filteredContent.length;

      if (rule.type === "text") {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        filteredContent = filteredContent.split(rule.pattern).join("");
      } else if (rule.type === "regex") {
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
        const regex = new RegExp(rule.pattern, rule.flags || "gi");
        filteredContent = filteredContent.replace(regex, "");
      }

      const afterLength = filteredContent.length;
      const replacements = beforeLength - afterLength;

      if (replacements > 0) {
        totalReplacements += replacements;
        logger.debug(
          `–ü—Ä–∞–≤–∏–ª–æ "${rule.description}": —É–¥–∞–ª–µ–Ω–æ ${replacements} —Å–∏–º–≤–æ–ª–æ–≤`
        );
      }
    }

    if (totalReplacements > 0) {
      // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      filteredContent = filteredContent
        .replace(/\s{2,}/g, " ") // –£–±–∏—Ä–∞–µ–º 2+ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ–¥—Ä—è–¥ (–∑–∞–º–µ–Ω—è–µ–º –æ–¥–Ω–∏–º)
        .replace(/\n\s*\n\s*\n/g, "\n\n") // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        .trim();

      logger.debug(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: ${totalReplacements}`);
    }

    return filteredContent;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª
   */
  getRulesCount(): number {
    return this.rules.length;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª
   */
  getRules(): readonly ContentFilterRule[] {
    return [...this.rules];
  }
}

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è FastFounder
export const createFastFounderFilter = (): ContentFilter => {
  const filter = new ContentFilter();

  // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ –ø—Ä–æ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é
  filter.addRegexRule(
    "üéß\\s*<a[^>]*>–ê—É–¥–∏–æ–≤–µ—Ä—Å–∏—è –ø–æ—Å—Ç–∞</a>\\.[^<]*<a[^>]*>–≤–æ—Ç –ø–æ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</a>\\.</p>",
    "–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø—Ä–æ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞"
  );

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –Ω–∞ —Å–ª—É—á–∞–π –≤–∞—Ä–∏–∞—Ü–∏–π
  filter.addRegexRule(
    "üéß[^.]*–∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é[^.]*–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏[^.]*\\.",
    "–£–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é"
  );

  return filter;
};
