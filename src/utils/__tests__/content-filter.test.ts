import { describe, it, expect } from "vitest";
import { ContentFilter, createFastFounderFilter } from "../content-filter.js";

describe("ContentFilter", () => {
  describe("—Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", () => {
    it("–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", () => {
      const filter = new ContentFilter();
      filter.addTextRule("—É–¥–∞–ª–∏—Ç—å —ç—Ç–æ", "—Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ");

      const input = "–ù–∞—á–∞–ª–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∫–æ–Ω–µ—Ü";
      const result = filter.filterContent(input);

      expect(result).toBe("–ù–∞—á–∞–ª–æ –∫–æ–Ω–µ—Ü");
    });

    it("–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è", () => {
      const filter = new ContentFilter();
      filter.addTextRule("spam", "—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞");

      const input = "spam —Ç–µ–∫—Å—Ç spam –µ—â–µ spam";
      const result = filter.filterContent(input);

      expect(result).toBe("—Ç–µ–∫—Å—Ç –µ—â–µ");
    });
  });

  describe("—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è", () => {
    it("–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –ø–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω—É", () => {
      const filter = new ContentFilter();
      filter.addRegexRule("\\d+", "—É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä");

      const input = "–¢–µ–∫—Å—Ç 123 —Å —Ü–∏—Ñ—Ä–∞–º–∏ 456";
      const result = filter.filterContent(input);

      expect(result).toBe("–¢–µ–∫—Å—Ç —Å —Ü–∏—Ñ—Ä–∞–º–∏");
    });

    it("–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–ª–∞–≥–∏ regex", () => {
      const filter = new ContentFilter();
      filter.addRegexRule("test", "—É–¥–∞–ª–µ–Ω–∏–µ test", "gi");

      const input = "Test –∏ test –∏ TEST";
      const result = filter.filterContent(input);

      expect(result).toBe("–∏ –∏");
    });
  });

  describe("–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞", () => {
    it("–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", () => {
      const filter = new ContentFilter();
      filter.addTextRule("remove", "—É–¥–∞–ª–µ–Ω–∏–µ remove");
      filter.addRegexRule("\\d+", "—É–¥–∞–ª–µ–Ω–∏–µ —Ü–∏—Ñ—Ä");

      const input = "text remove 123 end";
      const result = filter.filterContent(input);

      expect(result).toBe("text end");
    });
  });

  describe("–æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–æ–≤", () => {
    it("–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏", () => {
      const filter = new ContentFilter();
      filter.addTextRule("—É–¥–∞–ª–∏—Ç—å", "—Ç–µ—Å—Ç");

      const input = "–Ω–∞—á–∞–ª–æ   —É–¥–∞–ª–∏—Ç—å   –∫–æ–Ω–µ—Ü";
      const result = filter.filterContent(input);

      expect(result).toBe("–Ω–∞—á–∞–ª–æ –∫–æ–Ω–µ—Ü");
    });
  });
});

describe("createFastFounderFilter", () => {
  it("–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏", () => {
    const filter = createFastFounderFilter();

    expect(filter.getRulesCount()).toBeGreaterThan(0);
  });

  it("–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –±–ª–æ–∫ –ø—Ä–æ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é", () => {
    const filter = createFastFounderFilter();

    const input = `<p>üéß <a href="https://t.me/c/1715387706/39033">–ê—É–¥–∏–æ–≤–µ—Ä—Å–∏—è –ø–æ—Å—Ç–∞</a>. –ß—Ç–æ–±—ã –ø–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π Telegram ID –≤ –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ —Å –æ–±–∑–æ—Ä–∞–º–∏ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ <a href='https://fastfounder.ru/howtoread/'>–≤–æ—Ç –ø–æ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</a>.</p>
<h2>–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç</h2>`;

    const result = filter.filterContent(input);

    expect(result).not.toContain("üéß");
    expect(result).not.toContain("–ê—É–¥–∏–æ–≤–µ—Ä—Å–∏—è –ø–æ—Å—Ç–∞");
    expect(result).not.toContain("–≤–æ—Ç –ø–æ —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏");
    expect(result).toContain("–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç");
  });

  it("–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª—è—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é", () => {
    const filter = createFastFounderFilter();

    const input = "üéß –ü–æ—Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é –º–æ–∂–Ω–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.";
    const result = filter.filterContent(input);

    expect(result).not.toContain("üéß");
    expect(result).not.toContain("–∞—É–¥–∏–æ–≤–µ—Ä—Å–∏—é");
  });
});
