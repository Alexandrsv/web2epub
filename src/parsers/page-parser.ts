import { PageData } from "../types/page.js";
import { CONFIG } from "../config/index.js";
import { logger } from "../utils/logger.js";
import { sleep, retry } from "../utils/helpers.js";
import { decode } from "html-entities";
import { PageCache } from "../utils/cache.js";
import {
  ContentFilter,
  createFastFounderFilter,
} from "../utils/content-filter.js";

interface PostlightParserResult {
  title?: string;
  content?: string;
  excerpt?: string;
  url?: string;
  domain?: string;
  word_count?: number;
  date_published?: string;
  author?: string;
  lead_image_url?: string;
}

interface PostlightParser {
  parse(
    url: string,
    options?: { headers?: Record<string, string> }
  ): Promise<PostlightParserResult>;
}

export class PageParser {
  private readonly cookies: string;
  private parser: PostlightParser | null = null;
  private cache: PageCache;
  private contentFilter: ContentFilter;

  constructor(cookies: string, useContentFilter = true) {
    this.cookies = cookies;
    this.cache = new PageCache();

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    this.contentFilter = useContentFilter
      ? createFastFounderFilter()
      : new ContentFilter();

    if (useContentFilter) {
      logger.info(
        `üßπ –§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω: ${this.contentFilter.getRulesCount()} –ø—Ä–∞–≤–∏–ª`
      );
    }
  }

  private async initializeParser(): Promise<void> {
    if (!this.parser) {
      const parserModule = await import("@postlight/parser");
      this.parser = parserModule.default as PostlightParser;
    }
  }

  private cleanHtmlContent(content: string): string {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let cleanedContent = this.contentFilter.filterContent(content);

    // –ó–∞—Ç–µ–º –ù–ï —É–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è EPUB
    // –¢–æ–ª—å–∫–æ –æ—á–∏—â–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã
    cleanedContent = cleanedContent
      .replace(/<script[^>]*>.*?<\/script>/gis, "") // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
      .replace(/<style[^>]*>.*?<\/style>/gis, "") // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏
      .replace(/<!--.*?-->/gs, "") // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/\s+/g, " ") // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
      .trim();

    return cleanedContent;
  }

  async parsePage(url: string): Promise<PageData> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedPage = await this.cache.getPage(url);
    if (cachedPage) {
      logger.debug(`üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑ –∫–µ—à–∞: ${cachedPage.title}`);
      return cachedPage;
    }

    await this.initializeParser();

    const pageData = await retry(
      async () => {
        logger.debug(`–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);

        const result = await this.parser!.parse(url, {
          headers: {
            Cookie: this.cookies,
            "User-Agent": CONFIG.http.userAgent,
          },
        });

        // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities –≤ —Å—ã—Ä–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –ø–æ—Ç–æ–º –æ—á–∏—â–∞–µ–º
        const rawDecodedContent = decode(result.content || "");
        const cleanedContent = this.cleanHtmlContent(rawDecodedContent);

        const decodedTitle = decode(result.title || "");
        const decodedExcerpt = result.excerpt ? decode(result.excerpt) : "";

        const pageData: PageData = {
          title: decodedTitle,
          content: cleanedContent,
          excerpt: decodedExcerpt,
          url: result.url || url,
          domain: result.domain || "fastfounder.ru",
          wordCount: result.word_count || 0,
          datePublished: result.date_published || null,
          author: result.author || null,
          leadImageUrl: result.lead_image_url || null,
        };

        logger.debug(
          `–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∞—Ä—Å–µ–Ω–∞: ${pageData.title} (${pageData.wordCount} —Å–ª–æ–≤)`
        );
        return pageData;
      },
      CONFIG.retry.attempts,
      CONFIG.retry.delay
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    await this.cache.setPage(url, pageData);
    return pageData;
  }

  async parsePages(urls: string[]): Promise<PageData[]> {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
    const cacheStats = await this.cache.getCacheStats();
    if (cacheStats.totalPages > 0) {
      logger.info(`üì• –í –∫–µ—à–µ: ${cacheStats.totalPages} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ –≤ –∫–µ—à–µ
    const uncachedUrls = await this.cache.getUncachedUrls(urls);
    const cachedPages = await this.cache.getCachedPages(urls);

    if (cachedPages.length > 0) {
      logger.info(`üéØ –ò–∑ –∫–µ—à–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${cachedPages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    }

    if (uncachedUrls.length > 0) {
      logger.info(`üîÑ –ù—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å: ${uncachedUrls.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
    } else {
      logger.success("üéâ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–µ—à–µ!");
      return cachedPages;
    }

    const results: PageData[] = [...cachedPages];
    let parsedCount = 0;

    for (let i = 0; i < uncachedUrls.length; i++) {
      const url = uncachedUrls[i];

      try {
        const pageData = await this.parsePage(url);
        results.push(pageData);
        parsedCount++;

        logger.info(
          `‚úÖ ${parsedCount}/${uncachedUrls.length}: ${pageData.title}`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (parsedCount % 5 === 0) {
          await this.cache.saveCache();
          logger.debug(`üíæ –ö–µ—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω (${parsedCount} —Å—Ç—Ä–∞–Ω–∏—Ü)`);
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
        if (i < uncachedUrls.length - 1) {
          await sleep(CONFIG.delays.betweenRequests);
        }
      } catch (error) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${url}:`, error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        continue;
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞
    await this.cache.saveCache();
    logger.info(`üíæ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: ${results.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);

    return results;
  }
}
