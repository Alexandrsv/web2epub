import { CONFIG } from "./config/index.js";
import { logger } from "./utils/logger.js";
import { readCookies } from "./utils/cookies.js";
import { readPagesFromCSV } from "./utils/csv.js";
import { PageParser } from "./parsers/page-parser.js";
import { EpubGenerator } from "./epub/generator.js";
import { defaultEpubMetadata } from "./types/index.js";
import { formatDuration } from "./utils/helpers.js";
import { PageCache } from "./utils/cache.js";

class FastFounderParser {
  async clearCache(): Promise<void> {
    logger.info("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü...");
    const cache = new PageCache();
    await cache.clearCache();
    logger.success("‚úÖ –ö–µ—à –æ—á–∏—â–µ–Ω");
  }

  async run(): Promise<void> {
    const startTime = Date.now();

    try {
      logger.rocket("–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ FastFounder");
      logger.info(
        `–†–µ–∂–∏–º: ${CONFIG.isDev ? "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)" : "–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥"}`
      );

      // –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ cookies
      logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º cookies...");
      const cookies = await readCookies(CONFIG.COOKIES_FILE);
      logger.success("Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã");

      // –≠—Ç–∞–ø 2: –ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
      logger.info("–ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü...");
      const limit = CONFIG.isDev ? CONFIG.DEV_PAGES_LIMIT : undefined;
      const pages = await readPagesFromCSV(CONFIG.CSV_FILE, limit);
      logger.success(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${pages.length} —Å—Å—ã–ª–æ–∫`);

      logger.info(`–ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);

      // –≠—Ç–∞–ø 3: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü
      logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü...");
      const parser = new PageParser(cookies, CONFIG.contentFilter.enabled);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ ParsedCSVRow
      const urls = pages.map((page) => page.url);
      const parsedPages = await parser.parsePages(urls);

      if (parsedPages.length === 0) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
      }

      logger.success(`–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ ${parsedPages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);

      // –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ EPUB
      logger.info("–°–æ–∑–¥–∞–µ–º EPUB –¥–æ–∫—É–º–µ–Ω—Ç...");
      const epubGenerator = new EpubGenerator();
      const basePath = `./results/fastfounder-${
        CONFIG.isDev ? "dev" : "full"
      }.epub`;

      const epubResult = await epubGenerator.generateMultiPartEpub(
        parsedPages,
        defaultEpubMetadata,
        basePath,
        CONFIG.epub.parts
      );

      if (!epubResult.success) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EPUB: ${epubResult.error}`);
      }

      if (epubResult.totalParts === 1) {
        logger.success(
          `EPUB –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${epubResult.parts[0].outputPath}`
        );
      } else {
        logger.success(`–°–æ–∑–¥–∞–Ω–æ ${epubResult.totalParts} —á–∞—Å—Ç–µ–π EPUB:`);
        epubResult.parts.forEach((part) => {
          logger.info(
            `  üìñ –ß–∞—Å—Ç—å ${part.partNumber}: ${part.outputPath} (${part.chaptersCount} –≥–ª–∞–≤)`
          );
        });
      }

      // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const duration = Date.now() - startTime;
      logger.party("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
      logger.info(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${formatDuration(duration)}`);
      logger.info(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${parsedPages.length}`);
      logger.info(`–ß–∞—Å—Ç–µ–π EPUB: ${epubResult.totalParts}`);
      logger.info(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${epubResult.totalFileSize} –±–∞–π—Ç`);
    } catch (error) {
      const duration = Date.now() - startTime;
      const errorMessage =
        error instanceof Error ? error.message : String(error);

      logger.boom(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`);
      logger.info(`–í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${formatDuration(duration)}`);

      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é)
const isMainModule = import.meta.url === `file://${process.argv[1]}`;

if (isMainModule) {
  const app = new FastFounderParser();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  if (process.argv.includes("--clear-cache")) {
    app.clearCache().catch((error) => {
      logger.boom("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞:", error);
      process.exit(1);
    });
  } else {
    app.run().catch((error) => {
      logger.boom("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
  }
}
